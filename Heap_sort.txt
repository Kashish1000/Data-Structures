// HeapSort Implementation
// A max heap or min heap is a complete binary tree in which root is the largest(in case of max heap), or minimum(in case of min heap)
// A complete binary tree is a tree in which every level is completely filled except possibly the last level and every child node is placed as left as possible
#include<iostream>
using namespace std;
// In HeapSort , 1st step is to create a max heap from the input array in Heapsort function itself
// We need to heapify upto ( n/2-1 ) elements to create max heap
// Heapify(), Heap_sort() are the 2 important functions
void swap(int *a,int *b)
{
    int temp;
    temp=*a;
    *a=*b;
    *b=temp;
}
void print_array(int arr[],int n)
{
    for(int i=0;i<n;i++)
    {
        cout<<" "<<arr[i];
    }
}
void Heapify(int arr[], int n,int i)
{
    int largest;
    int l=(2*i)+1;
    int r=(2*i)+2;
    largest=i; // i is the root element
    if(l<n && arr[largest]<arr[l]) // if left child is greater than the root element
    {   // l<n , r<n  condition is used to avoid segmentation fault, because when leaf node becomes root node then there is no need to calculate the left or right child as it is a leaf node
        //swap(&arr[largest],&arr[l]);
        largest=l;
    }
    if(r<n && arr[largest]<arr[r]) // if right child is greater than the root element
    {
        //swap(&arr[largest],&arr[r]);
        largest=r;
    }
    if(largest!=i) // Recursively call heapify 
    {
        swap(&arr[largest],&arr[i]);
        Heapify(arr,n,largest);
    }
}
// Heap_sort function creates a max heap from input data and extract every element 1 by 1 and call heapify for the reduced size;
void Heap_sort(int arr[],int n)
{
    int i;
    // creating max heap from input data
    for(i=( (n/2)-1 );i>=0;i--)
    Heapify(arr,n,i); // i indicates the root index where heapify is to be performed
    
    for(i=(n-1);i>=0;i--)
    {
        swap(&arr[0],&arr[i]); // This will place the root element at the end of array, as the root element is the largest element after heapify is performed on whole heap.
        
        Heapify(arr,i,0); // i will act as a size of heap for each call of Heapify
    }
    
}
int main()
{
    int arr[]={10,2,1,39,50};
    int size=(sizeof(arr)/sizeof(arr[0]));
    cout<<endl<<"Input array before Heap_sort is :";
    print_array(arr,size);
    cout<<endl<<"Input array after Heap_sort is :";
    Heap_sort(arr,size);
    print_array(arr,size);
    return(0);
}