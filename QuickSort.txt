//Quick Sort implementation
#include<iostream>
using namespace std;
// In Quick_sort we choose a pivot element. We can choose either 1st , middle or last element as pivot element
// The goal is to put the pivot element into its correct position. 
// Quick_sort is a divide and conquer technique
// on the left side of partioning index we will store all the elements which are slower than the pivot element
// on the right side of partioning index we will have all the elements which are greater than the pivot element
// whenever partition() is called it will place the pivot element at its correct position

void swap(int *a,int *b)
{
    int temp;
    temp=*a;
    *a=*b;
    *b=temp;
}

int partition(int arr[],int low,int high)
{
    int pivot=arr[high],i=low-1,j=low;
    for(int j=low;j<high;j++)
    {
        if(arr[j]<pivot) // this checks for all the elements smaller than the pivot element and places 
        {
            i++;
            swap(&arr[i],&arr[j]);
        }
    }
    swap(&arr[i+1],&arr[high]); // this puts the pivot element to its correct position
    
    return(i+1);
    
}
void Quick_sort(int arr[],int low, int high)
{
    if(low<high)
    {
        int pi=partition(arr,low,high);
        Quick_sort(arr,low,pi-1);
        Quick_sort(arr,pi+1,high);
    }
    
}


void print_array(int arr[], int n)
{
    int i=0;
    for(i=0;i<n;i++)
    cout<<" "<<arr[i];
}


int main()
{
    int arr[]={10,6,1,20,50};
    int size=(sizeof(arr)/sizeof(int));
    cout<<"Given array is :";
    print_array(arr,size);
    cout<<endl<<"Calling Quick_sort :"<<endl;
    Quick_sort(arr,0,size-1);
    cout<<endl<<"Sorted array is :";
    print_array(arr,size);
    return(0);
}
