#include<bits/stdc++.h>  // It includes all the basic libraries
#include<string.h>
using namespace std; // to avoid name conflicts
int main()
{
    
    char str1[]={"geeks"}; // char array , but here str1 also includes the null character, because a string ends with a null character 
    char str2[]={'g','e','e','k','s'};
    string str3="geeks";  // diff b/w char array and string : string ends with null character
    // note : strrev is not a c++ function, either use pointer or stack, or container to reverse a string in C++
    // strrev function is defined in <string.h> file in C only
    // stack will take extra space of O(n) , while using pointers will not 
    int n=strlen(str1);  // strlen() accepts the pointer to an array , it calculates the number of memory positions or characters passed before the null character
    int m=sizeof(str1);
    cout<<endl<<"str1[]={'geeks'}";
    cout<<endl<<"str2[]={'g','e','e','k','s'}";
    cout<<endl<<"Using strlen(str1) "<<n<<" ,Using sizeof(str1) "<<m;
    n=strlen(str2);   // strlen() behaves abnormally if it doesn't found null character
                      // str2 doesn't stores null character while str1 does.
   
    m=sizeof(str2);     
    cout<<" Using strlen(str2) "<<n<<" ,Using sizeof(str2) "<<m;
    cout<<endl<<" strlen(str2) is behaving abnormally here";
    m=str3.length();
    cout<<endl<<"using str3.lenght():"<<m; // string.length() function is used for only string , not for character array
    // string.length() function is same as strlen(character_array), i.e. it counts for the number of characters before the null character
    return(0);
}
